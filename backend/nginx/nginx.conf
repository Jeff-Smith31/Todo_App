# Minimal Nginx reverse proxy for TickTock backend
# Notes:
# - For local/dev use. For production automatic TLS, Caddy remains the default in our deployment template.
# - If you want to use TLS with nginx locally, place server.crt and server.key in ./backend/nginx/certs/
#   and uncomment the ssl directives below.

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  keepalive_timeout  65;
  gzip on;

  upstream ticktock_backend {
    server backend:8080;
  }

  # HTTP (useful for initial tests or when TLS terminates elsewhere)
  server {
    listen 80;
    server_name _;

    location / {
      proxy_pass http://ticktock_backend;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }

  # HTTPS (requires certs at /etc/nginx/certs/server.crt and server.key)
  # Uncomment to enable if you provide certificates in ./backend/nginx/certs
  # server {
  #   listen 443 ssl;
  #   server_name _;
  #   ssl_certificate     /etc/nginx/certs/server.crt;
  #   ssl_certificate_key /etc/nginx/certs/server.key;
  #   ssl_protocols       TLSv1.2 TLSv1.3;
  #   ssl_ciphers         HIGH:!aNULL:!MD5;
  #   location / {
  #     proxy_pass http://ticktock_backend;
  #     proxy_set_header Host $host;
  #     proxy_set_header X-Real-IP $remote_addr;
  #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #     proxy_set_header X-Forwarded-Proto $scheme;
  #   }
  # }
}
