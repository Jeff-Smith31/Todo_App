name: Deploy Family Backend and Link Frontend

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DOMAIN_NAME: ${{ vars.DOMAIN_NAME || 'ticktocktasks.com' }}
  HOSTED_ZONE_ID: ${{ vars.HOSTED_ZONE_ID || 'Z08471201NA2PN7ERBIB7' }}
  BACKEND_REGION: ${{ vars.BACKEND_REGION || 'us-east-1' }}
  FAMILY_BACKEND_STACK_NAME: ${{ vars.FAMILY_BACKEND_STACK_NAME || 'ttt-family-backend' }}
  FRONTEND_REGION: ${{ vars.FRONTEND_REGION || 'us-east-1' }}
  FRONTEND_STACK_NAME: ${{ vars.FRONTEND_STACK_NAME || 'ttt-frontend' }}
  FAMILY_API_SUBDOMAIN: ${{ vars.FAMILY_API_SUBDOMAIN || 'family-api' }}

jobs:
  deploy-family:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.BACKEND_REGION }}

      - name: Resolve default VPC/Subnet
        id: net
        run: |
          VPC=$(aws ec2 describe-vpcs --region "${BACKEND_REGION}" --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
          SUB=$(aws ec2 describe-subnets --region "${BACKEND_REGION}" --filters "Name=vpc-id,Values=$VPC" --query "Subnets[?DefaultForAz==\`true\`][0].SubnetId" --output text)
          echo "vpc=$VPC" >> $GITHUB_OUTPUT
          echo "subnet=$SUB" >> $GITHUB_OUTPUT

      - name: Deploy Family Backend stack
        run: |
          ./infra/scripts/deploy-backend.sh \
            "${FAMILY_BACKEND_STACK_NAME}" \
            "${DOMAIN_NAME}" \
            "${HOSTED_ZONE_ID}" \
            "${{ steps.net.outputs.vpc }}" \
            "${{ steps.net.outputs.subnet }}" \
            "https://${DOMAIN_NAME},https://www.${DOMAIN_NAME}" \
            "${FAMILY_API_SUBDOMAIN}" \
            "https://github.com/${{ github.repository }}.git" \
            "${BACKEND_REGION}"

      - name: Get outputs (backend URL and site bucket)
        id: out
        run: |
          FAMILY_URL=$(aws cloudformation describe-stacks --region "${BACKEND_REGION}" --stack-name "${FAMILY_BACKEND_STACK_NAME}" --query "Stacks[0].Outputs[?OutputKey=='BackendEndpoint'].OutputValue | [0]" --output text)
          BUCKET=$(aws cloudformation describe-stacks --region "${FRONTEND_REGION}" --stack-name "${FRONTEND_STACK_NAME}" --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue | [0]" --output text)
          DIST_ID=$(aws cloudformation describe-stacks --region "${FRONTEND_REGION}" --stack-name "${FRONTEND_STACK_NAME}" --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue | [0]" --output text)
          echo "family_url=$FAMILY_URL" >> $GITHUB_OUTPUT
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "dist_id=$DIST_ID" >> $GITHUB_OUTPUT

      - name: Write /family/config.js
        run: |
          BUCKET=${{ steps.out.outputs.bucket }}
          URL=${{ steps.out.outputs.family_url }}
          echo "window.RUNTIME_CONFIG=Object.assign({},window.RUNTIME_CONFIG||{},{BACKEND_URL:'${URL}'});" | \
            aws s3 cp - s3://$BUCKET/family/config.js --content-type "application/javascript" --cache-control "no-cache, no-store, must-revalidate" --region "${FRONTEND_REGION}"

      - name: Invalidate /family/config.js
        run: |
          aws cloudfront create-invalidation --distribution-id "${{ steps.out.outputs.dist_id }}" --paths "/family/config.js"