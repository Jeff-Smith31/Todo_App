name: Frontend Deploy to S3 + CloudFront

on:
  workflow_dispatch:
    inputs:
      frontend_stack_name:
        description: "CloudFormation stack name for the frontend (S3+CloudFront)"
        required: false
        default: "ttt-frontend"
      backend_stack_name:
        description: "CloudFormation stack name for the backend (to resolve API endpoint)"
        required: false
        default: "ttt-backend"
      region:
        description: "AWS region (frontend stack should be us-east-1 for ACM)"
        required: false
        default: "us-east-1"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.region || vars.AWS_REGION || 'us-east-1' }}

      - name: Resolve frontend outputs (bucket, dist)
        id: out
        env:
          FRONT_STACK: ${{ inputs.frontend_stack_name || vars.FRONTEND_STACK_NAME || 'ttt-frontend' }}
          REGION: ${{ inputs.region || vars.AWS_REGION || 'us-east-1' }}
        run: |
          set -e
          BUCKET=$(aws cloudformation describe-stacks \
            --region "$REGION" \
            --stack-name "$FRONT_STACK" \
            --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue | [0]" \
            --output text)
          DIST=$(aws cloudformation describe-stacks \
            --region "$REGION" \
            --stack-name "$FRONT_STACK" \
            --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue | [0]" \
            --output text)
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "dist=$DIST" >> $GITHUB_OUTPUT
          echo "S3 bucket: $BUCKET" >> $GITHUB_STEP_SUMMARY
          echo "CloudFront Distribution: $DIST" >> $GITHUB_STEP_SUMMARY

      - name: Stage frontend (version artifacts)
        id: stage
        run: |
          set -e
          SITE_DIR=$(mktemp -d)
          cp -R frontend/website/. "$SITE_DIR/"
          BUILD_ID="${GITHUB_RUN_ID:-0}-${GITHUB_RUN_ATTEMPT:-0}"
          BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "window.APP_VERSION='${BUILD_ID}'; window.APP_BUILD_TIME='${BUILD_TIME}';" > "$SITE_DIR/app-version.js"
          echo "{\"version\":\"${BUILD_ID}\",\"time\":\"${BUILD_TIME}\"}" > "$SITE_DIR/version.json"
          # Ensure offline page exists
          if [ ! -f "$SITE_DIR/offline.html" ]; then
            cat > "$SITE_DIR/offline.html" <<'HTML'
            <!doctype html><meta charset="utf-8"><title>Offline</title><link rel="stylesheet" href="/styles.css"><div style="padding:1rem"><h1>Offline</h1><p>The app is offline. Your data is safe and will sync when reconnected.</p></div>
            HTML
          fi
          echo "site_dir=$SITE_DIR" >> $GITHUB_OUTPUT

      - name: Sync static files to S3 (immutable first)
        env:
          SITE_DIR: ${{ steps.stage.outputs.site_dir }}
          BUCKET: ${{ steps.out.outputs.bucket }}
        run: |
          set -e
          aws s3 sync "$SITE_DIR" "s3://$BUCKET" --delete --exclude "config.js" --exclude "app-version.js" --exclude "version.json"
          aws s3 cp "$SITE_DIR/app-version.js" "s3://$BUCKET/app-version.js" --cache-control "no-cache, no-store, must-revalidate" --content-type application/javascript
          aws s3 cp "$SITE_DIR/version.json" "s3://$BUCKET/version.json" --cache-control "no-cache, no-store, must-revalidate" --content-type application/json

      - name: Link frontend to backend (write config.js + invalidate CF)
        env:
          FRONTEND_STACK_NAME: ${{ inputs.frontend_stack_name || vars.FRONTEND_STACK_NAME || 'ttt-frontend' }}
          BACKEND_STACK_NAME: ${{ inputs.backend_stack_name || vars.BACKEND_STACK_NAME || 'ttt-backend' }}
          REGION: ${{ inputs.region || vars.AWS_REGION || 'us-east-1' }}
          BACKEND_OVERRIDE_URL: ${{ vars.BACKEND_OVERRIDE_URL }}
          USE_RELATIVE_API: ${{ vars.USE_RELATIVE_API }}
        run: |
          set -e
          chmod +x infra/scripts/link-frontend.sh
          infra/scripts/link-frontend.sh "$FRONTEND_STACK_NAME" "$BACKEND_STACK_NAME" "$REGION" "$REGION"

      - name: Final CloudFront cache bust (index)
        env:
          DIST_ID: ${{ steps.out.outputs.dist }}
        run: |
          set -e
          if [ -n "$DIST_ID" ] && [ "$DIST_ID" != "None" ]; then
            aws cloudfront create-invalidation --distribution-id "$DIST_ID" --paths "/index.html"
          fi