name: Frontend Deploy to S3 + CloudFront

on:
  workflow_dispatch:
    inputs:
      stack_name:
        description: 'CloudFormation stack name for frontend'
        required: true
        default: ttt-frontend
      region:
        description: 'AWS region (must be us-east-1 for this stack)'
        required: true
        default: us-east-1
      domain:
        description: 'Domain name (e.g., example.com). Leave empty to use state file.'
        required: false
      hosted_zone_id:
        description: 'Hosted Zone ID. Leave empty to use state file.'
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.region }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Discover or create AWS baseline (HostedZone/VPC/Subnets/ACM)
        env:
          DOMAIN_NAME: ${{ inputs.domain }}
        run: |
          DOMAIN_ARG="${DOMAIN_NAME:-}"
          if [ -z "$DOMAIN_ARG" ]; then
            # Try to read from existing state; if missing, fail fast
            if [ ! -f infra/state/state.json ]; then
              echo "No domain passed and no state found. Provide inputs.domain or run the discover script manually." >&2
              exit 1
            fi
          else
            bash infra/scripts/discover-or-create-aws.sh "$DOMAIN_ARG" "${{ inputs.region }}"
          fi

      - name: Deploy frontend stack (S3 + CloudFront)
        env:
          DOMAIN_NAME: ${{ inputs.domain }}
          HOSTED_ZONE_ID: ${{ inputs.hosted_zone_id }}
        run: |
          bash infra/scripts/deploy-frontend.sh "${{ inputs.stack_name }}" "${{ inputs.region }}"

      - name: Sync website to S3
        run: |
          BUCKET=$(jq -r '.Frontend.BucketName // empty' infra/state/state.json)
          [ -n "$BUCKET" ] || { echo "Bucket not found in state" >&2; exit 2; }
          aws s3 sync frontend/website "s3://$BUCKET" --delete --cache-control "public,max-age=31536000,immutable" --exclude "config.js" --exclude "index.html"
          # Upload index.html with no-cache
          aws s3 cp frontend/website/index.html "s3://$BUCKET/index.html" --content-type text/html --cache-control "no-cache"

      - name: Link frontend to backend (write config.js and invalidate)
        env:
          EXTRA_INVALIDATE: "/index.html /app.js /styles.css /offline.html /sw.js /manifest.json /icons/*"
        run: |
          bash infra/scripts/link-frontend.sh "${{ inputs.stack_name }}" ttt-backend "${{ inputs.region }}" "${{ inputs.region }}"
