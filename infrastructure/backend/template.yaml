AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 backend in existing VPC/Subnet with SSM, Docker, security group, EIP, and Route53 A record for api subdomain.

Parameters:
  DomainName:
    Type: String
  HostedZoneId:
    Type: String
  VpcId:
    Type: String
  SubnetId:
    Type: String
  AllowedOrigins:
    Type: String
    Default: ''
  ApiSubdomain:
    Type: String
    Default: api
  RepoUrl:
    Type: String
    Default: https://github.com/example/Todo_App.git
  CreateApiDnsRecord:
    Type: String
    AllowedValues: ['true','false']
    Default: 'true'

Mappings:
  RegionMap:
    us-east-1:
      Ami: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (HVM) - as example; may need updates

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ecrPull
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref InstanceRole]

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: TickTock Tasks API SG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ttt-backend-sg

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref AWS::Region, Ami]
      InstanceType: t2.micro
      SubnetId: !Ref SubnetId
      SecurityGroupIds: [!Ref SecurityGroup]
      Tags:
        - Key: Name
          Value: ttt-backend
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -eux
          exec >/var/log/ttt-userdata.log 2>&1
          yum update -y
          amazon-linux-extras install docker -y || true
          yum install -y docker git
          systemctl enable docker
          systemctl start docker
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          # Fetch app
          if [ ! -d "/opt/app" ]; then
            git clone ${RepoUrl} /opt/app
          fi
          cd /opt/app
          # Start backend via docker-compose (write .env in backend dir)
          cd backend
          echo "CORS_ORIGIN=https://${DomainName},https://www.${DomainName}" > .env
          echo "REDIRECT_HTTP_TO_HTTPS=false" >> .env
          /usr/local/bin/docker-compose pull || true
          /usr/local/bin/docker-compose up -d
          # Simple nginx health reload if present
          if [ -x /usr/bin/docker ] && /usr/bin/docker ps; then
            echo "Docker up"
          fi

  EipAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      InstanceId: !Ref Ec2Instance

  ApiRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub ${ApiSubdomain}.${DomainName}
      Type: A
      TTL: 60
      ResourceRecords:
        - !Ref ElasticIP

Conditions:
  CreateDns: !Equals [!Ref CreateApiDnsRecord, 'true']

Outputs:
  InstanceId:
    Value: !Ref Ec2Instance
  ApiDomainName:
    Value: !Sub ${ApiSubdomain}.${DomainName}
  PublicIp:
    Value: !Ref ElasticIP
  BackendEndpoint:
    Value: !Sub https://${ApiSubdomain}.${DomainName}
