AWSTemplateFormatVersion: '2010-09-09'
Description: Frontend S3 + CloudFront with Route53 records for apex and www.

Parameters:
  DomainName:
    Type: String
    Description: Root domain name (e.g., example.com)
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for the domain
  AcmCertificateArn:
    Type: String
    Description: Optional ACM certificate ARN in us-east-1. If empty, one will be created.
    Default: ''
  ExistingBucketName:
    Type: String
    Description: If provided, use this existing S3 bucket instead of creating one
    Default: ''

Conditions:
  CreateCert: !Equals [!Ref AcmCertificateArn, '']
  UseExistingBucket: !Not [!Equals [!Ref ExistingBucketName, '']]
  CreateBucket: !Equals [!Ref ExistingBucketName, '']

Resources:
  SiteBucket:
    Condition: CreateBucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${DomainName}-site
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !If [CreateBucket, !Ref SiteBucket, !Ref ExistingBucketName]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !If
              - CreateBucket
              - !Sub ${SiteBucket.Arn}/*
              - !Sub arn:aws:s3:::${ExistingBucketName}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDist}

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateCert
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Sub www.${DomainName}
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Sub www.${DomainName}
          HostedZoneId: !Ref HostedZoneId

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDist:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !Ref DomainName
          - !Sub www.${DomainName}
        DefaultCacheBehavior:
          TargetOriginId: siteOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          ForwardedValues:
            QueryString: false
        CacheBehaviors:
          - PathPattern: '/api/*'
            TargetOriginId: apiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer
        Origins:
          - Id: siteOrigin
            DomainName: !If
              - CreateBucket
              - !GetAtt SiteBucket.RegionalDomainName
              - !Sub ${ExistingBucketName}.s3.${AWS::Region}.amazonaws.com
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
          - Id: apiOrigin
            DomainName: !Sub api.${DomainName}
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        ViewerCertificate:
          AcmCertificateArn: !If [CreateCert, !Ref Certificate, !Ref AcmCertificateArn]
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  DnsApex:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDist.DomainName

  DnsWWW:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub www.${DomainName}
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDist.DomainName

Outputs:
  BucketName:
    Value: !If [CreateBucket, !Ref SiteBucket, !Ref ExistingBucketName]
  DistributionId:
    Value: !Ref CloudFrontDist
  DomainName:
    Value: !Ref DomainName
  CloudFrontDomain:
    Value: !GetAtt CloudFrontDist.DomainName
