# Nginx config for TickTock Tasks serving frontend (apex/www) and routing api subdomain to backend on the same instance
# TLS may be enabled via Let's Encrypt (Certbot) using the webroot at /var/www/certbot.

user  nginx;
worker_processes  auto;

error_log  /dev/stderr warn;
pid        /var/run/nginx.pid;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  access_log    /dev/stdout;
  sendfile        on;
  keepalive_timeout  65;
  gzip on;
  gzip_types text/plain text/css application/javascript application/json image/svg+xml;

  # Upstream backend (Docker Compose service name)
  upstream ticktock_backend {
    server backend:8080;
  }

  # ---------------------------------------------
  # HTTP (port 80) - Frontend: ticktocktasks.com and www.ticktocktasks.com
  # ---------------------------------------------
  server {
    listen 80 default_server;
    server_name ticktocktasks.com www.ticktocktasks.com _;

    # ACME webroot for Certbot challenges (kept for TLS issuance/renewal)
    location ^~ /.well-known/acme-challenge/ {
      root /var/www/certbot;
      default_type "text/plain";
    }

    # Health endpoint for container healthchecks (Nginx only, no backend dependency)
    location = /nginx-healthz {
      add_header Cache-Control "no-store";
      default_type text/plain;
      return 200 "ok";
    }

    # Backend health passthrough exposed under /api/healthz to avoid clashing with the SPA root
    location = /api/healthz {
      add_header Cache-Control "no-store";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://ticktock_backend/healthz;
    }
    # Prevent accidental landing on backend health page at /healthz
    location = /healthz { return 410; }

    # API (relative) -> Backend
    location /api/ {
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_pass http://ticktock_backend;
    }

    # Serve static frontend (SPA)
    root /usr/share/nginx/html;
    index index.html;

    # Cache control for static assets
    location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico|woff2?|ttf|eot)$ {
      expires 30d;
      add_header Cache-Control "public, max-age=2592000, immutable";
      try_files $uri =404;
    }

    # Service worker and manifest shouldn't be cached too aggressively
    location = /sw.js { expires 1h; add_header Cache-Control "public, max-age=3600"; try_files $uri =404; }
    location = /manifest.webmanifest { expires 1h; add_header Cache-Control "public, max-age=3600"; try_files $uri =404; }
    location = /config.js { expires -1; add_header Cache-Control "no-store"; try_files $uri =404; }

    # SPA fallback
    location / {
      try_files $uri $uri/ /index.html;
    }
  }

  # ---------------------------------------------
  # HTTP (port 80) - API: api.ticktocktasks.com -> backend container
  # ---------------------------------------------
  server {
    listen 80;
    server_name api.ticktocktasks.com;

    # ACME webroot for Certbot challenges
    location ^~ /.well-known/acme-challenge/ {
      root /var/www/certbot;
      default_type "text/plain";
    }

    # Health endpoint (proxies to backend health)
    location = /healthz {
      add_header Cache-Control "no-store";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://ticktock_backend/healthz;
    }

    # Proxy all API requests directly to backend
    location / {
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_buffering off;
      proxy_request_buffering off;
      proxy_read_timeout 60s;
      proxy_send_timeout 60s;
      proxy_pass http://ticktock_backend;
    }
  }

  # ---------------------------------------------
  # HTTPS (port 443) - Frontend only (apex/www). Add API TLS later when certs are present.
  # ---------------------------------------------
  server {
    listen 443 ssl http2;
    server_name ticktocktasks.com www.ticktocktasks.com;

    # NOTE: Ensure these certificate files exist on the host via Let's Encrypt
    ssl_certificate     /etc/letsencrypt/live/ticktocktasks.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ticktocktasks.com/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_cache shared:SSL:10m;

    # HSTS (prevents downgrade to HTTP; adjust max-age as needed)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Health endpoint remains available over HTTPS as well
    location = /nginx-healthz {
      add_header Cache-Control "no-store";
      default_type text/plain;
      return 200 "ok";
    }

    # Backend health exposed under /api/healthz to avoid clashing with the SPA root
    location = /api/healthz {
      add_header Cache-Control "no-store";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://ticktock_backend/healthz;
    }
    # Prevent accidental landing on backend health page at /healthz
    location = /healthz { return 410; }

    # API (relative) -> Backend
    location /api/ {
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Connection "";
      proxy_pass http://ticktock_backend;
    }

    # Serve static frontend (SPA)
    root /usr/share/nginx/html;
    index index.html;

    # Cache control for static assets
    location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico|woff2?|ttf|eot)$ {
      expires 30d;
      add_header Cache-Control "public, max-age=2592000, immutable";
      try_files $uri =404;
    }

    # Service worker and manifest shouldn't be cached too aggressively
    location = /sw.js { expires 1h; add_header Cache-Control "public, max-age=3600"; try_files $uri =404; }
    location = /manifest.webmanifest { expires 1h; add_header Cache-Control "public, max-age=3600"; try_files $uri =404; }
    location = /config.js { expires -1; add_header Cache-Control "no-store"; try_files $uri =404; }

    # SPA fallback
    location / {
      try_files $uri $uri/ /index.html;
    }
  }

}
