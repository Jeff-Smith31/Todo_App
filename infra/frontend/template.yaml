AWSTemplateFormatVersion: '2010-09-09'
Description: DEPRECATED - legacy CloudFront/S3 frontend stack (no longer used). Frontend is now served by Nginx on the backend EC2 instance.

Parameters:
  DomainName:
    Type: String
    Default: ticktocktasks.com
    Description: The primary domain name for the site (apex domain)
  IncludeWww:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Whether to include www.<DomainName> as an alternate domain
  IncludeAppSubdomain:
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Whether to include app.<DomainName> as an alternate domain
  AppSubdomain:
    Type: String
    Default: 'app'
    Description: Subdomain to use for the install landing page (e.g., 'app')
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID for the root domain
  BackendAlbDnsName:
    Type: String
    Default: ""
    Description: DNS name of the backend ALB (e.g., my-alb-123.us-east-1.elb.amazonaws.com). If empty, /api/* origin is omitted.
  ExistingBucketName:
    Type: String
    Default: ""
    Description: If set, reuse this existing S3 bucket for the site instead of creating a new one. Must be in the same account/region.
  ExistingCertificateArn:
    Type: String
    Default: ""
    Description: If set, reuse this ACM certificate ARN for CloudFront instead of creating a new one (must be in us-east-1).
  CreateDnsRecords:
    Type: String
    AllowedValues: ['true','false']
    Default: 'true'
    Description: Whether to create Route53 A/AAAA records for apex and www.
  SkipAliases:
    Type: String
    AllowedValues: ['true','false']
    Default: 'false'
    Description: If 'true', do not set CloudFront Aliases to avoid CNAME conflicts.

Conditions:
  UseWww: !Equals [ !Ref IncludeWww, 'true' ]
  UseApp: !Equals [ !Ref IncludeAppSubdomain, 'true' ]
  HasExistingBucket: !Not [ !Equals [ !Ref ExistingBucketName, '' ] ]
  NoExistingBucket: !Equals [ !Ref ExistingBucketName, '' ]
  HasExistingCert: !Not [ !Equals [ !Ref ExistingCertificateArn, '' ] ]
  NoExistingCert: !Equals [ !Ref ExistingCertificateArn, '' ]
  DoDns: !Equals [ !Ref CreateDnsRecords, 'true' ]
  DoWwwDns: !And [ !Condition UseWww, !Condition DoDns ]
  DoAppDns: !And [ !Condition UseApp, !Condition DoDns ]
  UseAliases: !Equals [ !Ref SkipAliases, 'false' ]

Mappings:
  CloudFront:
    Global:
      HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Zone ID for alias

Resources:
  # Create a certificate in us-east-1 for CloudFront (template must be deployed in us-east-1)
  SiteCertificate:
    Condition: NoExistingCert
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      SubjectAlternativeNames: !If
        - UseWww
        - !If
          - UseApp
          - [!Sub '${AppSubdomain}.${DomainName}', !Sub 'www.${DomainName}']
          - [!Sub 'www.${DomainName}']
        - !If
          - UseApp
          - [!Sub '${AppSubdomain}.${DomainName}']
          - []
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
        - !If
          - UseWww
          - { DomainName: !Sub 'www.${DomainName}', HostedZoneId: !Ref HostedZoneId }
          - { Ref: 'AWS::NoValue' }
      Tags:
        - Key: Project
          Value: TickTockTasks

  SiteBucket:
    Condition: NoExistingBucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${DomainName}-site'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: TickTockTasks

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-${DomainName}-oac'
        Description: Access S3 bucket privately from CloudFront
        SigningBehavior: always
        SigningProtocol: sigv4
        OriginAccessControlOriginType: s3

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Aliases: !If
          - UseAliases
          - !If
            - UseWww
            - !If
              - UseApp
              - [!Ref DomainName, !Sub 'www.${DomainName}', !Sub '${AppSubdomain}.${DomainName}']
              - [!Ref DomainName, !Sub 'www.${DomainName}']
            - !If
              - UseApp
              - [!Ref DomainName, !Sub '${AppSubdomain}.${DomainName}']
              - [!Ref DomainName]
          - !Ref AWS::NoValue
        ViewerCertificate:
          AcmCertificateArn: !If [HasExistingCert, !Ref ExistingCertificateArn, !Ref SiteCertificate]
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          TargetOriginId: site-s3-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
        Origins:
          - Id: site-s3-origin
            DomainName: !If [HasExistingBucket, !Sub '${ExistingBucketName}.s3.${AWS::Region}.amazonaws.com', !GetAtt SiteBucket.RegionalDomainName]
            S3OriginConfig: {}
            OriginAccessControlId: !Ref OriginAccessControl
        PriceClass: PriceClass_100
        CustomErrorResponses:
          # SPA routing: serve index.html for 403/404
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 10
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 10
      Tags:
        - Key: Project
          Value: TickTockTasks

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !If [HasExistingBucket, !Ref ExistingBucketName, !Ref SiteBucket]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontPrivateAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !If [HasExistingBucket, !Sub 'arn:aws:s3:::${ExistingBucketName}/*', !Sub '${SiteBucket.Arn}/*']
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}'

  ApexRecordA:
    Condition: DoDns
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: !FindInMap [CloudFront, Global, HostedZoneId]

  ApexRecordAAAA:
    Condition: DoDns
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: !FindInMap [CloudFront, Global, HostedZoneId]

  WwwRecordA:
    Type: AWS::Route53::RecordSet
    Condition: DoWwwDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: !FindInMap [CloudFront, Global, HostedZoneId]

  WwwRecordAAAA:
    Type: AWS::Route53::RecordSet
    Condition: DoWwwDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: !FindInMap [CloudFront, Global, HostedZoneId]

  AppRecordA:
    Type: AWS::Route53::RecordSet
    Condition: DoAppDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${AppSubdomain}.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: !FindInMap [CloudFront, Global, HostedZoneId]

  AppRecordAAAA:
    Type: AWS::Route53::RecordSet
    Condition: DoAppDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${AppSubdomain}.${DomainName}'
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: !FindInMap [CloudFront, Global, HostedZoneId]

Outputs:
  BucketName:
    Description: S3 bucket for site content
    Value: !If [HasExistingBucket, !Ref ExistingBucketName, !Ref SiteBucket]
  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref Distribution
  DistributionDomainName:
    Description: CloudFront domain
    Value: !GetAtt Distribution.DomainName
